#!/usr/bin/env python3

"""
File: bedrockServerManager.py
Author: Ethan Hunter
Notes: The main executable for bedrockServerManager
"""

from ArgParser import ArgParser
from ServerProperties import ServerProperties
import os
from shutil import move
import subprocess

VERSION = "0.1.1"

def _getAndValidateServerProperties(filePath):
    if ( os.path.isfile(filePath) ):
        s = ServerProperties(filePath)
        validationErrors = s.validate()
        if ( len(validationErrors) == 0 ):
            return s
        else:
            return validationErrors
    else:
        return filePath + " Filepath does not exist"


def _moveOldFiles():
    s = ServerProperties("server.properties")
    if ( os.path.isfile("./server.properties") ):
        validationErrors = s.validate()
        if ( len(validationErrors) == 0 ):
            move('./server.properties', './worlds/' + s.serverName)
            if ( os.path.isfile("./permissions.json") ):
                move('./permissions.json', './worlds/' + s.serverName)
            else:
                print("Permissions not found")
        else:
            print(validationErrors)
    else:
        print("Properties not found")

def _moveNewFiles(serverName: str):
    serverPropertiesFilename = "./worlds/" + serverName + "/server.properties"
    permissionsJsonFilename  = "./worlds/" + serverName + "/permissions.json"
    s = ServerProperties(serverPropertiesFilename)
    validationErrors = s.validate()
    if ( len(validationErrors) == 0):
        move(serverPropertiesFilename, "./server.properties")
        move(permissionsJsonFilename,  "./permissions.json")
    else:
        print(validationErrors)

def _checkForProperties():
    return os.path.isfile("./server.properties")

def _checkForPermissions():
    return os.path.isfile("./permissions.json")

def _checkForOverlap():
    existingFiles = False
    if ( os.path.isfile("./server.properties") ):
        existingFiles = True
    if ( os.path.isfile("./permissions.json") ):
        existingFiles = True
    return existingFiles

def _runServer(testing):
    if ( not testing ):
        print("Starting Server...")
        # subprocess.run('LD_LIBRARY_PATH=.') # TODO: Figure out what this does and if it is needed in the long term
        subprocess.run('./bedrock_server')
    else:
        print("Testing so not starting server")

def startServer(serverName: str, testing: bool):
    newServerPath = "./worlds/" + serverName
    if ( os.path.isdir(newServerPath) ):
        if ( _checkForProperties() ):
            serverProperties = _getAndValidateServerProperties("./server.properties")
            if ( isinstance(serverProperties, ServerProperties) ):
                if ( serverProperties.levelName == serverName ):
                    _runServer(testing)
                else:
                    _moveOldFiles()
                    if ( not _checkForOverlap() ):
                        _moveNewFiles(serverName)
                        _runServer(testing)
                    else:
                        print("Old files didn't get moved!")
            else:
                print("Error validating server.properties : " + str(serverProperties))
        else:
            _moveNewFiles(serverName)
            _runServer(testing)

    else:
        print("Invalid server name")

def stopServer():
    subprocess.run('stop')

def main():
    parser = ArgParser(VERSION).parser
    args = parser.parse_args()
    testing = args.testing
    if ( args.action == "start" ):
        startServer(args.server, testing)
    elif ( args.action == "stop" ):
        stopServer()
        print("Can't stop won't stop")

if ( __name__ == '__main__' ):
    main()
